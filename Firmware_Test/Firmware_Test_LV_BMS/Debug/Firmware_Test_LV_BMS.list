
Firmware_Test_LV_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002898  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a64  08002a64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a64  08002a64  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a64  08002a64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002a78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002a78  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cad  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000169a  00000000  00000000  00029ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0002bc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e9d1  00000000  00000000  0002c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007835  00000000  00000000  0004aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b8a77  00000000  00000000  000526e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010b15d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f8  00000000  00000000  0010b1d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002a0c 	.word	0x08002a0c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002a0c 	.word	0x08002a0c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b08a      	sub	sp, #40	; 0x28
 80001d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa4c 	bl	800066e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f865 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f901 	bl	80003e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f8c1 	bl	8000364 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0]=0x0C;
 80001e2:	230c      	movs	r3, #12
 80001e4:	723b      	strb	r3, [r7, #8]

	  ret = HAL_I2C_Mem_Read(&hi2c1, BQ_ADDR, buf[0], 1, dataBuf, 1,HAL_MAX_DELAY);
 80001e6:	2330      	movs	r3, #48	; 0x30
 80001e8:	b299      	uxth	r1, r3
 80001ea:	7a3b      	ldrb	r3, [r7, #8]
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	f04f 33ff 	mov.w	r3, #4294967295
 80001f2:	9302      	str	r3, [sp, #8]
 80001f4:	2301      	movs	r3, #1
 80001f6:	9301      	str	r3, [sp, #4]
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	2301      	movs	r3, #1
 80001fe:	4828      	ldr	r0, [pc, #160]	; (80002a0 <main+0xd4>)
 8000200:	f000 fed8 	bl	8000fb4 <HAL_I2C_Mem_Read>
 8000204:	4603      	mov	r3, r0
 8000206:	75fb      	strb	r3, [r7, #23]
	  if ( ret != HAL_OK ) {
 8000208:	7dfb      	ldrb	r3, [r7, #23]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d003      	beq.n	8000216 <main+0x4a>
		  HAL_Delay(100);
 800020e:	2064      	movs	r0, #100	; 0x64
 8000210:	f000 faa2 	bl	8000758 <HAL_Delay>
 8000214:	e002      	b.n	800021c <main+0x50>
	  }
	  else{
		  HAL_Delay(100);
 8000216:	2064      	movs	r0, #100	; 0x64
 8000218:	f000 fa9e 	bl	8000758 <HAL_Delay>
	  }

	  buf[0]=CELL_BAL1;
 800021c:	2301      	movs	r3, #1
 800021e:	723b      	strb	r3, [r7, #8]
	  dataBuf[0]=0x01;
 8000220:	2301      	movs	r3, #1
 8000222:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Mem_Write(&hi2c1, BQ_ADDR, buf[0], 1, dataBuf,1,HAL_MAX_DELAY);
 8000224:	2330      	movs	r3, #48	; 0x30
 8000226:	b299      	uxth	r1, r3
 8000228:	7a3b      	ldrb	r3, [r7, #8]
 800022a:	b29a      	uxth	r2, r3
 800022c:	f04f 33ff 	mov.w	r3, #4294967295
 8000230:	9302      	str	r3, [sp, #8]
 8000232:	2301      	movs	r3, #1
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2301      	movs	r3, #1
 800023c:	4818      	ldr	r0, [pc, #96]	; (80002a0 <main+0xd4>)
 800023e:	f000 fda5 	bl	8000d8c <HAL_I2C_Mem_Write>
 8000242:	4603      	mov	r3, r0
 8000244:	75fb      	strb	r3, [r7, #23]
	  if ( ret != HAL_OK ) {
 8000246:	7dfb      	ldrb	r3, [r7, #23]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d004      	beq.n	8000256 <main+0x8a>
	  	  HAL_Delay(1000);
 800024c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000250:	f000 fa82 	bl	8000758 <HAL_Delay>
 8000254:	e003      	b.n	800025e <main+0x92>
	  }
	  else{
	  	  HAL_Delay(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025a:	f000 fa7d 	bl	8000758 <HAL_Delay>
	  }
	  dataBuf[0]=0x00;
 800025e:	2300      	movs	r3, #0
 8000260:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Mem_Write(&hi2c1, BQ_ADDR, buf[0], 1, dataBuf,1,HAL_MAX_DELAY);
 8000262:	2330      	movs	r3, #48	; 0x30
 8000264:	b299      	uxth	r1, r3
 8000266:	7a3b      	ldrb	r3, [r7, #8]
 8000268:	b29a      	uxth	r2, r3
 800026a:	f04f 33ff 	mov.w	r3, #4294967295
 800026e:	9302      	str	r3, [sp, #8]
 8000270:	2301      	movs	r3, #1
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <main+0xd4>)
 800027c:	f000 fd86 	bl	8000d8c <HAL_I2C_Mem_Write>
 8000280:	4603      	mov	r3, r0
 8000282:	75fb      	strb	r3, [r7, #23]
	  if ( ret != HAL_OK ) {
 8000284:	7dfb      	ldrb	r3, [r7, #23]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d004      	beq.n	8000294 <main+0xc8>
	  	  HAL_Delay(1000);
 800028a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028e:	f000 fa63 	bl	8000758 <HAL_Delay>
 8000292:	e7a6      	b.n	80001e2 <main+0x16>
	  }
	  else{
	  	  HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f000 fa5e 	bl	8000758 <HAL_Delay>
	  buf[0]=0x0C;
 800029c:	e7a1      	b.n	80001e2 <main+0x16>
 800029e:	bf00      	nop
 80002a0:	20000028 	.word	0x20000028

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b0ac      	sub	sp, #176	; 0xb0
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002ae:	2244      	movs	r2, #68	; 0x44
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fba2 	bl	80029fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2254      	movs	r2, #84	; 0x54
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fb94 	bl	80029fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002d4:	2310      	movs	r3, #16
 80002d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e4:	2360      	movs	r3, #96	; 0x60
 80002e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fa8f 	bl	8001818 <HAL_RCC_OscConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000300:	f000 f8b8 	bl	8000474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	230f      	movs	r3, #15
 8000306:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000308:	2300      	movs	r3, #0
 800030a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000318:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fe9a 	bl	8002058 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800032a:	f000 f8a3 	bl	8000474 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800032e:	2340      	movs	r3, #64	; 0x40
 8000330:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000332:	2300      	movs	r3, #0
 8000334:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4618      	mov	r0, r3
 800033a:	f002 f859 	bl	80023f0 <HAL_RCCEx_PeriphCLKConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000344:	f000 f896 	bl	8000474 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000348:	f44f 7000 	mov.w	r0, #512	; 0x200
 800034c:	f001 fa0e 	bl	800176c <HAL_PWREx_ControlVoltageScaling>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000356:	f000 f88d 	bl	8000474 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	37b0      	adds	r7, #176	; 0xb0
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_I2C1_Init+0x74>)
 800036a:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <MX_I2C1_Init+0x78>)
 800036c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000370:	f640 6214 	movw	r2, #3604	; 0xe14
 8000374:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_I2C1_Init+0x74>)
 800037e:	2201      	movs	r2, #1
 8000380:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <MX_I2C1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_I2C1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003a2:	f000 fc63 	bl	8000c6c <HAL_I2C_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003ac:	f000 f862 	bl	8000474 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b0:	2100      	movs	r1, #0
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003b4:	f001 f934 	bl	8001620 <HAL_I2CEx_ConfigAnalogFilter>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003be:	f000 f859 	bl	8000474 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003c6:	f001 f976 	bl	80016b6 <HAL_I2CEx_ConfigDigitalFilter>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80003d0:	f000 f850 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000028 	.word	0x20000028
 80003dc:	40005400 	.word	0x40005400

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_GPIO_Init+0x8c>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <MX_GPIO_Init+0x8c>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_GPIO_Init+0x8c>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0304 	and.w	r3, r3, #4
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_GPIO_Init+0x8c>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	4a16      	ldr	r2, [pc, #88]	; (800046c <MX_GPIO_Init+0x8c>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_GPIO_Init+0x8c>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_GPIO_Init+0x8c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <MX_GPIO_Init+0x8c>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_GPIO_Init+0x8c>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	480b      	ldr	r0, [pc, #44]	; (8000470 <MX_GPIO_Init+0x90>)
 8000444:	f000 fbfa 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000448:	2340      	movs	r3, #64	; 0x40
 800044a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 030c 	add.w	r3, r7, #12
 800045c:	4619      	mov	r1, r3
 800045e:	4804      	ldr	r0, [pc, #16]	; (8000470 <MX_GPIO_Init+0x90>)
 8000460:	f000 fa82 	bl	8000968 <HAL_GPIO_Init>

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	48000400 	.word	0x48000400

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6613      	str	r3, [r2, #96]	; 0x60
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x44>)
 8000498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <HAL_MspInit+0x44>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	6593      	str	r3, [r2, #88]	; 0x58
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_MspInit+0x44>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a18      	ldr	r2, [pc, #96]	; (800054c <HAL_I2C_MspInit+0x80>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d129      	bne.n	8000542 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_I2C_MspInit+0x84>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <HAL_I2C_MspInit+0x84>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_I2C_MspInit+0x84>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000506:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800050c:	2312      	movs	r3, #18
 800050e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000510:	2301      	movs	r3, #1
 8000512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000514:	2303      	movs	r3, #3
 8000516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000518:	2304      	movs	r3, #4
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f000 fa1f 	bl	8000968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <HAL_I2C_MspInit+0x84>)
 800052c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <HAL_I2C_MspInit+0x84>)
 8000530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000534:	6593      	str	r3, [r2, #88]	; 0x58
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_I2C_MspInit+0x84>)
 8000538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	; 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40005400 	.word	0x40005400
 8000550:	40021000 	.word	0x40021000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>

0800056e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <UsageFault_Handler+0x4>

0800057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a8:	f000 f8b6 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <SystemInit+0x64>)
 80005b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <SystemInit+0x64>)
 80005bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <SystemInit+0x68>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a13      	ldr	r2, [pc, #76]	; (8000618 <SystemInit+0x68>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <SystemInit+0x68>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <SystemInit+0x68>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <SystemInit+0x68>)
 80005dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <SystemInit+0x68>)
 80005e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <SystemInit+0x68>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <SystemInit+0x68>)
 80005f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <SystemInit+0x68>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <SystemInit+0x64>)
 8000602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000606:	609a      	str	r2, [r3, #8]
#endif
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00
 8000618:	40021000 	.word	0x40021000

0800061c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800061c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000654 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000620:	f7ff ffc6 	bl	80005b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000624:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000626:	e003      	b.n	8000630 <LoopCopyDataInit>

08000628 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800062a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800062c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800062e:	3104      	adds	r1, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000634:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000636:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000638:	d3f6      	bcc.n	8000628 <CopyDataInit>
	ldr	r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
	b	LoopFillZerobss
 800063c:	e002      	b.n	8000644 <LoopFillZerobss>

0800063e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800063e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000640:	f842 3b04 	str.w	r3, [r2], #4

08000644 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <LoopForever+0x16>)
	cmp	r2, r3
 8000646:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000648:	d3f9      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800064a:	f002 f9b3 	bl	80029b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064e:	f7ff fdbd 	bl	80001cc <main>

08000652 <LoopForever>:

LoopForever:
    b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000654:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000658:	08002a6c 	.word	0x08002a6c
	ldr	r0, =_sdata
 800065c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000660:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000664:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000668:	20000078 	.word	0x20000078

0800066c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_IRQHandler>

0800066e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000674:	2300      	movs	r3, #0
 8000676:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f941 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067e:	2000      	movs	r0, #0
 8000680:	f000 f80e 	bl	80006a0 <HAL_InitTick>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	e001      	b.n	8000694 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000690:	f7ff fef8 	bl	8000484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000694:	79fb      	ldrb	r3, [r7, #7]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <HAL_InitTick+0x6c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d023      	beq.n	80006fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_InitTick+0x70>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <HAL_InitTick+0x6c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f93f 	bl	800094e <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10f      	bne.n	80006f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d809      	bhi.n	80006f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f000 f917 	bl	8000916 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e8:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <HAL_InitTick+0x74>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	e007      	b.n	8000700 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e004      	b.n	8000700 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e001      	b.n	8000700 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008
 8000710:	20000000 	.word	0x20000000
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_IncTick+0x20>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_IncTick+0x24>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_IncTick+0x24>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000008 	.word	0x20000008
 800073c:	20000074 	.word	0x20000074

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <HAL_GetTick+0x14>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000074 	.word	0x20000074

08000758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000760:	f7ff ffee 	bl	8000740 <HAL_GetTick>
 8000764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000770:	d005      	beq.n	800077e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_Delay+0x40>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4413      	add	r3, r2
 800077c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077e:	bf00      	nop
 8000780:	f7ff ffde 	bl	8000740 <HAL_GetTick>
 8000784:	4602      	mov	r2, r0
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	429a      	cmp	r2, r3
 800078e:	d8f7      	bhi.n	8000780 <HAL_Delay+0x28>
  {
  }
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000008 	.word	0x20000008

0800079c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__NVIC_GetPriorityGrouping+0x18>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	f003 0307 	and.w	r3, r3, #7
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f7ff ff8e 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff47 	bl	800079c <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff5c 	bl	80007e4 <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff8e 	bl	8000854 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffb0 	bl	80008bc <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e148      	b.n	8000c0a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 813a 	beq.w	8000c04 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d00b      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a4:	2b11      	cmp	r3, #17
 80009a6:	d003      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b12      	cmp	r3, #18
 80009ae:	d130      	bne.n	8000a12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	f003 0201 	and.w	r2, r3, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0xea>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	6939      	ldr	r1, [r7, #16]
 8000a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8094 	beq.w	8000c04 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b52      	ldr	r3, [pc, #328]	; (8000c28 <HAL_GPIO_Init+0x2c0>)
 8000ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae0:	4a51      	ldr	r2, [pc, #324]	; (8000c28 <HAL_GPIO_Init+0x2c0>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae8:	4b4f      	ldr	r3, [pc, #316]	; (8000c28 <HAL_GPIO_Init+0x2c0>)
 8000aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af4:	4a4d      	ldr	r2, [pc, #308]	; (8000c2c <HAL_GPIO_Init+0x2c4>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b1e:	d00d      	beq.n	8000b3c <HAL_GPIO_Init+0x1d4>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x1d0>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a42      	ldr	r2, [pc, #264]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d101      	bne.n	8000b34 <HAL_GPIO_Init+0x1cc>
 8000b30:	2302      	movs	r3, #2
 8000b32:	e004      	b.n	8000b3e <HAL_GPIO_Init+0x1d6>
 8000b34:	2307      	movs	r3, #7
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x1d6>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <HAL_GPIO_Init+0x1d6>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	f002 0203 	and.w	r2, r2, #3
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4e:	4937      	ldr	r1, [pc, #220]	; (8000c2c <HAL_GPIO_Init+0x2c4>)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b5c:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b80:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bd4:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3301      	adds	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa22 f303 	lsr.w	r3, r2, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f47f aeaf 	bne.w	8000978 <HAL_GPIO_Init+0x10>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	48000800 	.word	0x48000800
 8000c38:	40010400 	.word	0x40010400

08000c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	807b      	strh	r3, [r7, #2]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c4c:	787b      	ldrb	r3, [r7, #1]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c58:	e002      	b.n	8000c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e081      	b.n	8000d82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d106      	bne.n	8000c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fc1a 	bl	80004cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2224      	movs	r2, #36	; 0x24
 8000c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0201 	bic.w	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ccc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d107      	bne.n	8000ce6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	e006      	b.n	8000cf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000cf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d104      	bne.n	8000d06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6812      	ldr	r2, [r2, #0]
 8000d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	ea42 0103 	orr.w	r1, r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	021a      	lsls	r2, r3, #8
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69d9      	ldr	r1, [r3, #28]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1a      	ldr	r2, [r3, #32]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	817b      	strh	r3, [r7, #10]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	813b      	strh	r3, [r7, #8]
 8000da2:	4613      	mov	r3, r2
 8000da4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b20      	cmp	r3, #32
 8000db0:	f040 80f9 	bne.w	8000fa6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <HAL_I2C_Mem_Write+0x34>
 8000dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d105      	bne.n	8000dcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e0ed      	b.n	8000fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d101      	bne.n	8000dda <HAL_I2C_Mem_Write+0x4e>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e0e6      	b.n	8000fa8 <HAL_I2C_Mem_Write+0x21c>
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000de2:	f7ff fcad 	bl	8000740 <HAL_GetTick>
 8000de6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2319      	movs	r3, #25
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f000 fac3 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e0d1      	b.n	8000fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2221      	movs	r2, #33	; 0x21
 8000e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2240      	movs	r2, #64	; 0x40
 8000e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6a3a      	ldr	r2, [r7, #32]
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e2c:	88f8      	ldrh	r0, [r7, #6]
 8000e2e:	893a      	ldrh	r2, [r7, #8]
 8000e30:	8979      	ldrh	r1, [r7, #10]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f000 f9d3 	bl	80011e8 <I2C_RequestMemoryWrite>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d005      	beq.n	8000e54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e0a9      	b.n	8000fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	2bff      	cmp	r3, #255	; 0xff
 8000e5c:	d90e      	bls.n	8000e7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	22ff      	movs	r2, #255	; 0xff
 8000e62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	8979      	ldrh	r1, [r7, #10]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f000 fba5 	bl	80015c4 <I2C_TransferConfig>
 8000e7a:	e00f      	b.n	8000e9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	8979      	ldrh	r1, [r7, #10]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f000 fb94 	bl	80015c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f000 faad 	bl	8001400 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e07b      	b.n	8000fa8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d034      	beq.n	8000f54 <HAL_I2C_Mem_Write+0x1c8>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d130      	bne.n	8000f54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 fa3f 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e04d      	b.n	8000fa8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	2bff      	cmp	r3, #255	; 0xff
 8000f14:	d90e      	bls.n	8000f34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	22ff      	movs	r2, #255	; 0xff
 8000f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	8979      	ldrh	r1, [r7, #10]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f000 fb49 	bl	80015c4 <I2C_TransferConfig>
 8000f32:	e00f      	b.n	8000f54 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	8979      	ldrh	r1, [r7, #10]
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 fb38 	bl	80015c4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d19e      	bne.n	8000e9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 fa8c 	bl	8001480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e01a      	b.n	8000fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2220      	movs	r2, #32
 8000f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6859      	ldr	r1, [r3, #4]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_I2C_Mem_Write+0x224>)
 8000f86:	400b      	ands	r3, r1
 8000f88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000fa6:	2302      	movs	r3, #2
  }
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	fe00e800 	.word	0xfe00e800

08000fb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	817b      	strh	r3, [r7, #10]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	813b      	strh	r3, [r7, #8]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b20      	cmp	r3, #32
 8000fd8:	f040 80fd 	bne.w	80011d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <HAL_I2C_Mem_Read+0x34>
 8000fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0f1      	b.n	80011d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_I2C_Mem_Read+0x4e>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e0ea      	b.n	80011d8 <HAL_I2C_Mem_Read+0x224>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800100a:	f7ff fb99 	bl	8000740 <HAL_GetTick>
 800100e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2319      	movs	r3, #25
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f9af 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0d5      	b.n	80011d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2222      	movs	r2, #34	; 0x22
 8001030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2240      	movs	r2, #64	; 0x40
 8001038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a3a      	ldr	r2, [r7, #32]
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800104c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001054:	88f8      	ldrh	r0, [r7, #6]
 8001056:	893a      	ldrh	r2, [r7, #8]
 8001058:	8979      	ldrh	r1, [r7, #10]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4603      	mov	r3, r0
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f000 f913 	bl	8001290 <I2C_RequestMemoryRead>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0ad      	b.n	80011d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001080:	b29b      	uxth	r3, r3
 8001082:	2bff      	cmp	r3, #255	; 0xff
 8001084:	d90e      	bls.n	80010a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001090:	b2da      	uxtb	r2, r3
 8001092:	8979      	ldrh	r1, [r7, #10]
 8001094:	4b52      	ldr	r3, [pc, #328]	; (80011e0 <HAL_I2C_Mem_Read+0x22c>)
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 fa91 	bl	80015c4 <I2C_TransferConfig>
 80010a2:	e00f      	b.n	80010c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	8979      	ldrh	r1, [r7, #10]
 80010b6:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <HAL_I2C_Mem_Read+0x22c>)
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 fa80 	bl	80015c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	2200      	movs	r2, #0
 80010cc:	2104      	movs	r1, #4
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f956 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e07c      	b.n	80011d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001106:	b29b      	uxth	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001114:	b29b      	uxth	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d034      	beq.n	8001184 <HAL_I2C_Mem_Read+0x1d0>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111e:	2b00      	cmp	r3, #0
 8001120:	d130      	bne.n	8001184 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001128:	2200      	movs	r2, #0
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f927 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e04d      	b.n	80011d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001140:	b29b      	uxth	r3, r3
 8001142:	2bff      	cmp	r3, #255	; 0xff
 8001144:	d90e      	bls.n	8001164 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	22ff      	movs	r2, #255	; 0xff
 800114a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001150:	b2da      	uxtb	r2, r3
 8001152:	8979      	ldrh	r1, [r7, #10]
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 fa31 	bl	80015c4 <I2C_TransferConfig>
 8001162:	e00f      	b.n	8001184 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001168:	b29a      	uxth	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001172:	b2da      	uxtb	r2, r3
 8001174:	8979      	ldrh	r1, [r7, #10]
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f000 fa20 	bl	80015c4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001188:	b29b      	uxth	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d19a      	bne.n	80010c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f974 	bl	8001480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e01a      	b.n	80011d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2220      	movs	r2, #32
 80011a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6859      	ldr	r1, [r3, #4]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_I2C_Mem_Read+0x230>)
 80011b6:	400b      	ands	r3, r1
 80011b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2220      	movs	r2, #32
 80011be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80011d6:	2302      	movs	r3, #2
  }
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	80002400 	.word	0x80002400
 80011e4:	fe00e800 	.word	0xfe00e800

080011e8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	4608      	mov	r0, r1
 80011f2:	4611      	mov	r1, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	817b      	strh	r3, [r7, #10]
 80011fa:	460b      	mov	r3, r1
 80011fc:	813b      	strh	r3, [r7, #8]
 80011fe:	4613      	mov	r3, r2
 8001200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	8979      	ldrh	r1, [r7, #10]
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <I2C_RequestMemoryWrite+0xa4>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f9d7 	bl	80015c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	69b9      	ldr	r1, [r7, #24]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 f8f0 	bl	8001400 <I2C_WaitOnTXISFlagUntilTimeout>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e02c      	b.n	8001284 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d105      	bne.n	800123c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001230:	893b      	ldrh	r3, [r7, #8]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
 800123a:	e015      	b.n	8001268 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800123c:	893b      	ldrh	r3, [r7, #8]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2da      	uxtb	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	69b9      	ldr	r1, [r7, #24]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f8d6 	bl	8001400 <I2C_WaitOnTXISFlagUntilTimeout>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e012      	b.n	8001284 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800125e:	893b      	ldrh	r3, [r7, #8]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2200      	movs	r2, #0
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f884 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	80002000 	.word	0x80002000

08001290 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	4608      	mov	r0, r1
 800129a:	4611      	mov	r1, r2
 800129c:	461a      	mov	r2, r3
 800129e:	4603      	mov	r3, r0
 80012a0:	817b      	strh	r3, [r7, #10]
 80012a2:	460b      	mov	r3, r1
 80012a4:	813b      	strh	r3, [r7, #8]
 80012a6:	4613      	mov	r3, r2
 80012a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	8979      	ldrh	r1, [r7, #10]
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <I2C_RequestMemoryRead+0xa4>)
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f984 	bl	80015c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f89d 	bl	8001400 <I2C_WaitOnTXISFlagUntilTimeout>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e02c      	b.n	800132a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d105      	bne.n	80012e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012d6:	893b      	ldrh	r3, [r7, #8]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
 80012e0:	e015      	b.n	800130e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012e2:	893b      	ldrh	r3, [r7, #8]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f883 	bl	8001400 <I2C_WaitOnTXISFlagUntilTimeout>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e012      	b.n	800132a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001304:	893b      	ldrh	r3, [r7, #8]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2200      	movs	r2, #0
 8001316:	2140      	movs	r1, #64	; 0x40
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f831 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	80002000 	.word	0x80002000

08001338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b02      	cmp	r3, #2
 800134c:	d103      	bne.n	8001356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d007      	beq.n	8001374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	619a      	str	r2, [r3, #24]
  }
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001390:	e022      	b.n	80013d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d01e      	beq.n	80013d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800139a:	f7ff f9d1 	bl	8000740 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d302      	bcc.n	80013b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d113      	bne.n	80013d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f043 0220 	orr.w	r2, r3, #32
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2220      	movs	r2, #32
 80013c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e00f      	b.n	80013f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	4013      	ands	r3, r2
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d0cd      	beq.n	8001392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800140c:	e02c      	b.n	8001468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 f870 	bl	80014f8 <I2C_IsAcknowledgeFailed>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e02a      	b.n	8001478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d01e      	beq.n	8001468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142a:	f7ff f989 	bl	8000740 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	429a      	cmp	r2, r3
 8001438:	d302      	bcc.n	8001440 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d113      	bne.n	8001468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	f043 0220 	orr.w	r2, r3, #32
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2220      	movs	r2, #32
 8001450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e007      	b.n	8001478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b02      	cmp	r3, #2
 8001474:	d1cb      	bne.n	800140e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800148c:	e028      	b.n	80014e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 f830 	bl	80014f8 <I2C_IsAcknowledgeFailed>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e026      	b.n	80014f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a2:	f7ff f94d 	bl	8000740 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d302      	bcc.n	80014b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d113      	bne.n	80014e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	f043 0220 	orr.w	r2, r3, #32
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e007      	b.n	80014f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d1cf      	bne.n	800148e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b10      	cmp	r3, #16
 8001510:	d151      	bne.n	80015b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001512:	e022      	b.n	800155a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151a:	d01e      	beq.n	800155a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151c:	f7ff f910 	bl	8000740 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	d302      	bcc.n	8001532 <I2C_IsAcknowledgeFailed+0x3a>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d113      	bne.n	800155a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f043 0220 	orr.w	r2, r3, #32
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2220      	movs	r2, #32
 8001542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e02e      	b.n	80015b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b20      	cmp	r3, #32
 8001566:	d1d5      	bne.n	8001514 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2210      	movs	r2, #16
 800156e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2220      	movs	r2, #32
 8001576:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff fedd 	bl	8001338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800158a:	400b      	ands	r3, r1
 800158c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f043 0204 	orr.w	r2, r3, #4
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	fe00e800 	.word	0xfe00e800

080015c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	817b      	strh	r3, [r7, #10]
 80015d2:	4613      	mov	r3, r2
 80015d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	0d5b      	lsrs	r3, r3, #21
 80015e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <I2C_TransferConfig+0x58>)
 80015e6:	430b      	orrs	r3, r1
 80015e8:	43db      	mvns	r3, r3
 80015ea:	ea02 0103 	and.w	r1, r2, r3
 80015ee:	897b      	ldrh	r3, [r7, #10]
 80015f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f4:	7a7b      	ldrb	r3, [r7, #9]
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	431a      	orrs	r2, r3
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	03ff63ff 	.word	0x03ff63ff

08001620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b20      	cmp	r3, #32
 8001634:	d138      	bne.n	80016a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001640:	2302      	movs	r3, #2
 8001642:	e032      	b.n	80016aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2224      	movs	r2, #36	; 0x24
 8001650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e000      	b.n	80016aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016a8:	2302      	movs	r3, #2
  }
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d139      	bne.n	8001740 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e033      	b.n	8001742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2224      	movs	r2, #36	; 0x24
 80016e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001708:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	e000      	b.n	8001742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001740:	2302      	movs	r3, #2
  }
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <HAL_PWREx_GetVoltageRange+0x18>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40007000 	.word	0x40007000

0800176c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800177a:	d130      	bne.n	80017de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001788:	d038      	beq.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001798:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2232      	movs	r2, #50	; 0x32
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	3301      	adds	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b0:	e002      	b.n	80017b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c4:	d102      	bne.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f2      	bne.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d8:	d110      	bne.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e00f      	b.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ea:	d007      	beq.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f4:	4a05      	ldr	r2, [pc, #20]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40007000 	.word	0x40007000
 8001810:	20000000 	.word	0x20000000
 8001814:	431bde83 	.word	0x431bde83

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	f000 bc11 	b.w	800204e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182c:	4ba0      	ldr	r3, [pc, #640]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001836:	4b9e      	ldr	r3, [pc, #632]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80e4 	beq.w	8001a16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_RCC_OscConfig+0x4c>
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	f040 808b 	bne.w	8001972 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2b01      	cmp	r3, #1
 8001860:	f040 8087 	bne.w	8001972 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001864:	4b92      	ldr	r3, [pc, #584]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x64>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e3e8      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_RCC_OscConfig+0x7e>
 800188c:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001894:	e005      	b.n	80018a2 <HAL_RCC_OscConfig+0x8a>
 8001896:	4b86      	ldr	r3, [pc, #536]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d223      	bcs.n	80018ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fd40 	bl	8002330 <RCC_SetFlashLatencyFromMSIRange>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e3c9      	b.n	800204e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7c      	ldr	r2, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4977      	ldr	r1, [pc, #476]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d8:	4b75      	ldr	r3, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	4972      	ldr	r1, [pc, #456]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e025      	b.n	800193a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6f      	ldr	r2, [pc, #444]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	496a      	ldr	r1, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	4965      	ldr	r1, [pc, #404]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fd00 	bl	8002330 <RCC_SetFlashLatencyFromMSIRange>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e389      	b.n	800204e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800193a:	f000 fc6f 	bl	800221c <HAL_RCC_GetSysClockFreq>
 800193e:	4601      	mov	r1, r0
 8001940:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_RCC_OscConfig+0x29c>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	fa21 f303 	lsr.w	r3, r1, r3
 8001956:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_OscConfig+0x2a0>)
 8001958:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_OscConfig+0x2a4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe9e 	bl	80006a0 <HAL_InitTick>
 8001964:	4603      	mov	r3, r0
 8001966:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d052      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	e36d      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d032      	beq.n	80019e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800197a:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001986:	f7fe fedb 	bl	8000740 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198e:	f7fe fed7 	bl	8000740 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e356      	b.n	800204e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a0:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ac:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a3f      	ldr	r2, [pc, #252]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	493a      	ldr	r1, [pc, #232]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	4935      	ldr	r1, [pc, #212]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
 80019de:	e01a      	b.n	8001a16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a32      	ldr	r2, [pc, #200]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ec:	f7fe fea8 	bl	8000740 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f4:	f7fe fea4 	bl	8000740 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e323      	b.n	800204e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1dc>
 8001a12:	e000      	b.n	8001a16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d073      	beq.n	8001b0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_OscConfig+0x21c>
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d10e      	bne.n	8001a4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d063      	beq.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d15f      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e300      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a54:	d106      	bne.n	8001a64 <HAL_RCC_OscConfig+0x24c>
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x288>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x270>
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x288>
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_RCC_OscConfig+0x298>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01b      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7fe fe4a 	bl	8000740 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aae:	e010      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2ba>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	08002a24 	.word	0x08002a24
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7fe fe3e 	bl	8000740 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e2bd      	b.n	800204e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad2:	4baf      	ldr	r3, [pc, #700]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2a8>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7fe fe2e 	bl	8000740 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7fe fe2a 	bl	8000740 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e2a9      	b.n	800204e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afa:	4ba5      	ldr	r3, [pc, #660]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2d0>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d060      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x310>
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d119      	bne.n	8001b56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d116      	bne.n	8001b56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b28:	4b99      	ldr	r3, [pc, #612]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_OscConfig+0x328>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e286      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b93      	ldr	r3, [pc, #588]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	4990      	ldr	r1, [pc, #576]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b54:	e040      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d023      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5e:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a8b      	ldr	r2, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fde9 	bl	8000740 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b72:	f7fe fde5 	bl	8000740 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e264      	b.n	800204e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b84:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	497c      	ldr	r1, [pc, #496]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
 8001ba4:	e018      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a79      	ldr	r2, [pc, #484]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7fe fdc5 	bl	8000740 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7fe fdc1 	bl	8000740 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e240      	b.n	800204e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bcc:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d03c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf2:	4a67      	ldr	r2, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7fe fda0 	bl	8000740 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7fe fd9c 	bl	8000740 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e21b      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c16:	4b5e      	ldr	r3, [pc, #376]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ef      	beq.n	8001c04 <HAL_RCC_OscConfig+0x3ec>
 8001c24:	e01b      	b.n	8001c5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c26:	4b5a      	ldr	r3, [pc, #360]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c36:	f7fe fd83 	bl	8000740 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7fe fd7f 	bl	8000740 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1fe      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c50:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ef      	bne.n	8001c3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80a6 	beq.w	8001db8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c70:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7c:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	4a43      	ldr	r2, [pc, #268]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c86:	6593      	str	r3, [r2, #88]	; 0x58
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c94:	2301      	movs	r3, #1
 8001c96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c98:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <HAL_RCC_OscConfig+0x57c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d118      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_OscConfig+0x57c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a3a      	ldr	r2, [pc, #232]	; (8001d94 <HAL_RCC_OscConfig+0x57c>)
 8001caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb0:	f7fe fd46 	bl	8000740 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb8:	f7fe fd42 	bl	8000740 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1c1      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_RCC_OscConfig+0x57c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4d8>
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cee:	e024      	b.n	8001d3a <HAL_RCC_OscConfig+0x522>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d110      	bne.n	8001d1a <HAL_RCC_OscConfig+0x502>
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d18:	e00f      	b.n	8001d3a <HAL_RCC_OscConfig+0x522>
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d016      	beq.n	8001d70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7fe fcfd 	bl	8000740 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7fe fcf9 	bl	8000740 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e176      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0ed      	beq.n	8001d4a <HAL_RCC_OscConfig+0x532>
 8001d6e:	e01a      	b.n	8001da6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7fe fce6 	bl	8000740 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d76:	e00f      	b.n	8001d98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7fe fce2 	bl	8000740 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d906      	bls.n	8001d98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e15f      	b.n	800204e <HAL_RCC_OscConfig+0x836>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d98:	4baa      	ldr	r3, [pc, #680]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1e8      	bne.n	8001d78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001da6:	7ffb      	ldrb	r3, [r7, #31]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d105      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dac:	4ba5      	ldr	r3, [pc, #660]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	4aa4      	ldr	r2, [pc, #656]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dcc:	4b9d      	ldr	r3, [pc, #628]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd2:	4a9c      	ldr	r2, [pc, #624]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7fe fcb0 	bl	8000740 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de4:	f7fe fcac 	bl	8000740 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e12b      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001df6:	4b93      	ldr	r3, [pc, #588]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ef      	beq.n	8001de4 <HAL_RCC_OscConfig+0x5cc>
 8001e04:	e01b      	b.n	8001e3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e06:	4b8f      	ldr	r3, [pc, #572]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e0c:	4a8d      	ldr	r2, [pc, #564]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7fe fc93 	bl	8000740 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e1e:	f7fe fc8f 	bl	8000740 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e10e      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e30:	4b84      	ldr	r3, [pc, #528]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ef      	bne.n	8001e1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8102 	beq.w	800204c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	f040 80c5 	bne.w	8001fdc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e52:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 0203 	and.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d12c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	3b01      	subs	r3, #1
 8001e72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d123      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d11b      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d113      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d109      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d067      	beq.n	8001f90 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d062      	beq.n	8001f8c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ec6:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0bb      	b.n	800204e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee2:	f7fe fc2d 	bl	8000740 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe fc29 	bl	8000740 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0a8      	b.n	800204e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efc:	4b51      	ldr	r3, [pc, #324]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <HAL_RCC_OscConfig+0x830>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f18:	3a01      	subs	r2, #1
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f22:	0212      	lsls	r2, r2, #8
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f2a:	0852      	lsrs	r2, r2, #1
 8001f2c:	3a01      	subs	r2, #1
 8001f2e:	0552      	lsls	r2, r2, #21
 8001f30:	4311      	orrs	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f36:	0852      	lsrs	r2, r2, #1
 8001f38:	3a01      	subs	r2, #1
 8001f3a:	0652      	lsls	r2, r2, #25
 8001f3c:	4311      	orrs	r1, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f42:	06d2      	lsls	r2, r2, #27
 8001f44:	430a      	orrs	r2, r1
 8001f46:	493f      	ldr	r1, [pc, #252]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3c      	ldr	r2, [pc, #240]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f58:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4a39      	ldr	r2, [pc, #228]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f64:	f7fe fbec 	bl	8000740 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7fe fbe8 	bl	8000740 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e067      	b.n	800204e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f8a:	e05f      	b.n	800204c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e05e      	b.n	800204e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d157      	bne.n	800204c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a28      	ldr	r2, [pc, #160]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb4:	f7fe fbc4 	bl	8000740 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe fbc0 	bl	8000740 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e03f      	b.n	800204e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x7a4>
 8001fda:	e037      	b.n	800204c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d02d      	beq.n	800203e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fec:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8002000:	f023 0303 	bic.w	r3, r3, #3
 8002004:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 800200c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002014:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe fb93 	bl	8000740 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe fb8f 	bl	8000740 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e00e      	b.n	800204e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_RCC_OscConfig+0x82c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x806>
 800203c:	e006      	b.n	800204c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e005      	b.n	800204e <HAL_RCC_OscConfig+0x836>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0c8      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4961      	ldr	r1, [pc, #388]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b0      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d04c      	beq.n	8002142 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b0:	4b56      	ldr	r3, [pc, #344]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d121      	bne.n	8002100 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e09e      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d115      	bne.n	8002100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e092      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e086      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f0:	4b46      	ldr	r3, [pc, #280]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e07e      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002100:	4b42      	ldr	r3, [pc, #264]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 0203 	bic.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	493f      	ldr	r1, [pc, #252]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002112:	f7fe fb15 	bl	8000740 <HAL_GetTick>
 8002116:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002118:	e00a      	b.n	8002130 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211a:	f7fe fb11 	bl	8000740 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e066      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002130:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 020c 	and.w	r2, r3, #12
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	429a      	cmp	r2, r3
 8002140:	d1eb      	bne.n	800211a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214e:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	492c      	ldr	r1, [pc, #176]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4924      	ldr	r1, [pc, #144]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_ClockConfig+0x1b0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e036      	b.n	80021fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4918      	ldr	r1, [pc, #96]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4910      	ldr	r1, [pc, #64]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ce:	f000 f825 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021d2:	4601      	mov	r1, r0
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	fa21 f303 	lsr.w	r3, r1, r3
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fa54 	bl	80006a0 <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80021fc:	7afb      	ldrb	r3, [r7, #11]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40022000 	.word	0x40022000
 800220c:	40021000 	.word	0x40021000
 8002210:	08002a24 	.word	0x08002a24
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002234:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x34>
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d121      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d11e      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800225c:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	e005      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002278:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <HAL_RCC_GetSysClockFreq+0x108>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002280:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10d      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d102      	bne.n	800229a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	e004      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_GetSysClockFreq+0x110>)
 80022a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d133      	bne.n	8002312 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80022be:	e005      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022c2:	617b      	str	r3, [r7, #20]
      break;
 80022c4:	e005      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_GetSysClockFreq+0x110>)
 80022c8:	617b      	str	r3, [r7, #20]
      break;
 80022ca:	e002      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	617b      	str	r3, [r7, #20]
      break;
 80022d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	3301      	adds	r3, #1
 80022de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	fb02 f203 	mul.w	r2, r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_GetSysClockFreq+0x104>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0e5b      	lsrs	r3, r3, #25
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	3301      	adds	r3, #1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002312:	69bb      	ldr	r3, [r7, #24]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3724      	adds	r7, #36	; 0x24
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40021000 	.word	0x40021000
 8002324:	08002a34 	.word	0x08002a34
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200

08002330 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002348:	f7ff fa02 	bl	8001750 <HAL_PWREx_GetVoltageRange>
 800234c:	6178      	str	r0, [r7, #20]
 800234e:	e014      	b.n	800237a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	; 0x58
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002368:	f7ff f9f2 	bl	8001750 <HAL_PWREx_GetVoltageRange>
 800236c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800236e:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002378:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002380:	d10b      	bne.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d919      	bls.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2ba0      	cmp	r3, #160	; 0xa0
 800238c:	d902      	bls.n	8002394 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800238e:	2302      	movs	r3, #2
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e013      	b.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002394:	2301      	movs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	e010      	b.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d902      	bls.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023a0:	2303      	movs	r3, #3
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	e00a      	b.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b80      	cmp	r3, #128	; 0x80
 80023aa:	d102      	bne.n	80023b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ac:	2302      	movs	r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	e004      	b.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b70      	cmp	r3, #112	; 0x70
 80023b6:	d101      	bne.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b8:	2301      	movs	r3, #1
 80023ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 0207 	bic.w	r2, r3, #7
 80023c4:	4909      	ldr	r1, [pc, #36]	; (80023ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40022000 	.word	0x40022000

080023f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f8:	2300      	movs	r3, #0
 80023fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023fc:	2300      	movs	r3, #0
 80023fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02f      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002414:	d005      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002416:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800241a:	d015      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002420:	e00f      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002422:	4bac      	ldr	r3, [pc, #688]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4aab      	ldr	r2, [pc, #684]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800242e:	e00c      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3304      	adds	r3, #4
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f9cc 	bl	80027d4 <RCCEx_PLLSAI1_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002440:	e003      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	74fb      	strb	r3, [r7, #19]
      break;
 8002446:	e000      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002450:	4ba0      	ldr	r3, [pc, #640]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	499d      	ldr	r1, [pc, #628]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002466:	e001      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8099 	beq.w	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800247e:	4b95      	ldr	r3, [pc, #596]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	4b8f      	ldr	r3, [pc, #572]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	4a8e      	ldr	r2, [pc, #568]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800249a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	; 0x58
 80024a0:	4b8c      	ldr	r3, [pc, #560]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b0:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a88      	ldr	r2, [pc, #544]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024bc:	f7fe f940 	bl	8000740 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024c2:	e009      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c4:	f7fe f93c 	bl	8000740 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d902      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	74fb      	strb	r3, [r7, #19]
        break;
 80024d6:	e005      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024d8:	4b7f      	ldr	r3, [pc, #508]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ef      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d155      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ea:	4b7a      	ldr	r3, [pc, #488]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01e      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	429a      	cmp	r2, r3
 8002504:	d019      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002510:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002512:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	4a6e      	ldr	r2, [pc, #440]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002522:	4b6c      	ldr	r3, [pc, #432]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	4a6a      	ldr	r2, [pc, #424]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800252a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002532:	4a68      	ldr	r2, [pc, #416]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d016      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe f8fc 	bl	8000740 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254a:	e00b      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7fe f8f8 	bl	8000740 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d902      	bls.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	74fb      	strb	r3, [r7, #19]
            break;
 8002562:	e006      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002564:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ec      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002578:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002586:	4953      	ldr	r1, [pc, #332]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800258e:	e004      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
 8002594:	e001      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259a:	7c7b      	ldrb	r3, [r7, #17]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	4a4b      	ldr	r2, [pc, #300]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b8:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4943      	ldr	r1, [pc, #268]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025da:	4b3e      	ldr	r3, [pc, #248]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f023 020c 	bic.w	r2, r3, #12
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	493a      	ldr	r1, [pc, #232]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	4932      	ldr	r1, [pc, #200]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	4929      	ldr	r1, [pc, #164]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002640:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	4921      	ldr	r1, [pc, #132]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4918      	ldr	r1, [pc, #96]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4910      	ldr	r1, [pc, #64]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02c      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c4:	d10a      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c6:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d0:	60d3      	str	r3, [r2, #12]
 80026d2:	e015      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2101      	movs	r1, #1
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f871 	bl	80027d4 <RCCEx_PLLSAI1_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d028      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	492d      	ldr	r1, [pc, #180]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272a:	d106      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60d3      	str	r3, [r2, #12]
 8002738:	e011      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002742:	d10c      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	2101      	movs	r1, #1
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f842 	bl	80027d4 <RCCEx_PLLSAI1_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01c      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002778:	4915      	ldr	r1, [pc, #84]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f81f 	bl	80027d4 <RCCEx_PLLSAI1_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	4904      	ldr	r1, [pc, #16]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027e2:	4b73      	ldr	r3, [pc, #460]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d018      	beq.n	8002820 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027ee:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0203 	and.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d10d      	bne.n	800281a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
       ||
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002806:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
       ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d044      	beq.n	80028a4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	e041      	b.n	80028a4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d00c      	beq.n	8002842 <RCCEx_PLLSAI1_Config+0x6e>
 8002828:	2b03      	cmp	r3, #3
 800282a:	d013      	beq.n	8002854 <RCCEx_PLLSAI1_Config+0x80>
 800282c:	2b01      	cmp	r3, #1
 800282e:	d120      	bne.n	8002872 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002830:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11d      	bne.n	8002878 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002840:	e01a      	b.n	8002878 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002852:	e013      	b.n	800287c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002854:	4b56      	ldr	r3, [pc, #344]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002860:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002870:	e006      	b.n	8002880 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
      break;
 8002876:	e004      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002878:	bf00      	nop
 800287a:	e002      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800287c:	bf00      	nop
 800287e:	e000      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002880:	bf00      	nop
    }

    if(status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	3b01      	subs	r3, #1
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	430b      	orrs	r3, r1
 800289e:	4944      	ldr	r1, [pc, #272]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d17c      	bne.n	80029a4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a40      	ldr	r2, [pc, #256]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b6:	f7fd ff43 	bl	8000740 <HAL_GetTick>
 80028ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028bc:	e009      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028be:	f7fd ff3f 	bl	8000740 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d902      	bls.n	80028d2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	73fb      	strb	r3, [r7, #15]
        break;
 80028d0:	e005      	b.n	80028de <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ef      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d15f      	bne.n	80029a4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d110      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	0211      	lsls	r1, r2, #8
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	06d2      	lsls	r2, r2, #27
 8002902:	430a      	orrs	r2, r1
 8002904:	492a      	ldr	r1, [pc, #168]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	610b      	str	r3, [r1, #16]
 800290a:	e027      	b.n	800295c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d112      	bne.n	8002938 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800291a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6892      	ldr	r2, [r2, #8]
 8002922:	0211      	lsls	r1, r2, #8
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6912      	ldr	r2, [r2, #16]
 8002928:	0852      	lsrs	r2, r2, #1
 800292a:	3a01      	subs	r2, #1
 800292c:	0552      	lsls	r2, r2, #21
 800292e:	430a      	orrs	r2, r1
 8002930:	491f      	ldr	r1, [pc, #124]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	610b      	str	r3, [r1, #16]
 8002936:	e011      	b.n	800295c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6892      	ldr	r2, [r2, #8]
 8002948:	0211      	lsls	r1, r2, #8
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6952      	ldr	r2, [r2, #20]
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	3a01      	subs	r2, #1
 8002952:	0652      	lsls	r2, r2, #25
 8002954:	430a      	orrs	r2, r1
 8002956:	4916      	ldr	r1, [pc, #88]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fd feea 	bl	8000740 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800296e:	e009      	b.n	8002984 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002970:	f7fd fee6 	bl	8000740 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d902      	bls.n	8002984 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	73fb      	strb	r3, [r7, #15]
          break;
 8002982:	e005      	b.n	8002990 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ef      	beq.n	8002970 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4904      	ldr	r1, [pc, #16]	; (80029b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	4e0d      	ldr	r6, [pc, #52]	; (80029ec <__libc_init_array+0x38>)
 80029b8:	4c0d      	ldr	r4, [pc, #52]	; (80029f0 <__libc_init_array+0x3c>)
 80029ba:	1ba4      	subs	r4, r4, r6
 80029bc:	10a4      	asrs	r4, r4, #2
 80029be:	2500      	movs	r5, #0
 80029c0:	42a5      	cmp	r5, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	4e0b      	ldr	r6, [pc, #44]	; (80029f4 <__libc_init_array+0x40>)
 80029c6:	4c0c      	ldr	r4, [pc, #48]	; (80029f8 <__libc_init_array+0x44>)
 80029c8:	f000 f820 	bl	8002a0c <_init>
 80029cc:	1ba4      	subs	r4, r4, r6
 80029ce:	10a4      	asrs	r4, r4, #2
 80029d0:	2500      	movs	r5, #0
 80029d2:	42a5      	cmp	r5, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029dc:	4798      	blx	r3
 80029de:	3501      	adds	r5, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029e6:	4798      	blx	r3
 80029e8:	3501      	adds	r5, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	08002a64 	.word	0x08002a64
 80029f0:	08002a64 	.word	0x08002a64
 80029f4:	08002a64 	.word	0x08002a64
 80029f8:	08002a68 	.word	0x08002a68

080029fc <memset>:
 80029fc:	4402      	add	r2, r0
 80029fe:	4603      	mov	r3, r0
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <_init>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr

08002a18 <_fini>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	bf00      	nop
 8002a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1e:	bc08      	pop	{r3}
 8002a20:	469e      	mov	lr, r3
 8002a22:	4770      	bx	lr
